/*
	Generates an offline FIO transaction that can be submitted to a FIO API node.
		
	This should be run AFTER the network variables are updated (via the command: 'node network.js')

	Instructions:
	1) Change the baseUrl variable, to the correct URL.

	2) run the file
	This file is run via command line:
	i.e.
		> node index.js

	RESULTS:
	* localSignedTransactions.txt has the local signed transactions packaged as a curl command 

	Author: Shawn Arney
*/
const properties = require('./properties.js');
const FIOJS = require('@fioprotocol/fiojs');
const TextEncoding = require('text-encoding');
const fs = require("fs"); 
const fetch = require('node-fetch');

const baseUrl = properties.server + '/v1/chain/';
const privateKey = properties.privateKey;
const publicKey = properties.publicKey;
const actor = properties.actor;
const maxFee = properties.maxFee;

const action = properties.action;

// trnsfiopubky 
const transferAmount = properties.transferAmount;
const payeePubKey = properties.payeePubKey;

// voteproducer 
const voterFioAddress = properties.voterFioAddress;
const producerList = properties.producerList;

// files
const networkFile = 'network.json';
const signedTransactionFileName = 'localSignedTransactions.txt'

// these variables are populated by running 'node network.js' - from a networked computer
head_block_time = ''
chain_id = ''
ref_block_num = ''
ref_block_prefix = ''

function getAbiMap() {

	abiMap = new Map();
/*
	tokenRawAbi = await (await fetch(baseUrl + 'get_raw_abi', { body: `{"account_name": "fio.token"}`, method: 'POST' })).json();
	//abiMap.set('fio.token', tokenRawAbi);

	tokenRawAbi = await (await fetch(baseUrl + 'get_raw_abi', { body: `{"account_name": "eosio"}`, method: 'POST' })).json();
	//abiMap.set('eosio', tokenRawAbi);

	tokenRawAbi = await (await fetch(baseUrl + 'get_raw_abi', { body: `{"account_name": "fio.address"}`, method: 'POST' })).json();
	//abiMap.set('fio.address', tokenRawAbi);

	tokenRawAbi = await (await fetch(baseUrl + 'get_raw_abi', { body: `{"account_name": "fio.reqobt"}`, method: 'POST' })).json();
	//abiMap.set('fio.reqobt', tokenRawAbi);

*/
	abiMap.set('fio.token', {
		account_name: 'fio.token',
		abi: 'DmVvc2lvOjphYmkvMS4xAAoHYWNjb3VudAABB2JhbGFuY2UFYXNzZXQGY3JlYXRlAAEObWF4aW11bV9zdXBwbHkFYXNzZXQOY3VycmVuY3lfc3RhdHMAAwZzdXBwbHkFYXNzZXQKbWF4X3N1cHBseQVhc3NldAZpc3N1ZXIEbmFtZQVpc3N1ZQADAnRvBG5hbWUIcXVhbnRpdHkFYXNzZXQEbWVtbwZzdHJpbmcMbG9ja3BlcmlvZHYyAAIIZHVyYXRpb24FaW50NjQGYW1vdW50BWludDY0B21pbnRmaW8AAgJ0bwRuYW1lBmFtb3VudAZ1aW50NjQGcmV0aXJlAAIIcXVhbnRpdHkFYXNzZXQEbWVtbwZzdHJpbmcIdHJhbnNmZXIABARmcm9tBG5hbWUCdG8EbmFtZQhxdWFudGl0eQVhc3NldARtZW1vBnN0cmluZwx0cm5zZmlvcHVia3kABRBwYXllZV9wdWJsaWNfa2V5BnN0cmluZwZhbW91bnQFaW50NjQHbWF4X2ZlZQVpbnQ2NAVhY3RvcgRuYW1lBHRwaWQGc3RyaW5nC3RybnNsb2N0b2tzAAcQcGF5ZWVfcHVibGljX2tleQZzdHJpbmcIY2FuX3ZvdGUFaW50MzIHcGVyaW9kcw5sb2NrcGVyaW9kdjJbXQZhbW91bnQFaW50NjQHbWF4X2ZlZQVpbnQ2NAVhY3RvcgRuYW1lBHRwaWQGc3RyaW5nBwAAAACobNRFBmNyZWF0ZQAAAAAAAKUxdgVpc3N1ZQAAAACAupWnkwdtaW50ZmlvAAAAAACo67K6BnJldGlyZQAAAABXLTzNzQh0cmFuc2ZlcgDg4dGVuoXnzQx0cm5zZmlvcHVia3kAADCkGdGI580LdHJuc2xvY3Rva3MAAgAAADhPTREyA2k2NAAAB2FjY291bnQAAAAAAJBNxgNpNjQAAA5jdXJyZW5jeV9zdGF0cwAAAAA=='
	})

	abiMap.set('eosio', {
		account_name: 'eosio',
		abi: 'DmVvc2lvOjphYmkvMS4xADkIYWJpX2hhc2gAAgVvd25lcgRuYW1lBGhhc2gLY2hlY2tzdW0yNTYJYWRkYWN0aW9uAAMGYWN0aW9uBG5hbWUIY29udHJhY3QGc3RyaW5nBWFjdG9yBG5hbWUMYWRkZ2VubG9ja2VkAAQFb3duZXIEbmFtZQdwZXJpb2RzDmxvY2twZXJpb2R2MltdB2NhbnZvdGUEYm9vbAZhbW91bnQFaW50NjQJYWRkbG9ja2VkAAMFb3duZXIEbmFtZQZhbW91bnQFaW50NjQIbG9ja3R5cGUFaW50MTYJYXV0aG9yaXR5AAQJdGhyZXNob2xkBnVpbnQzMgRrZXlzDGtleV93ZWlnaHRbXQhhY2NvdW50cxlwZXJtaXNzaW9uX2xldmVsX3dlaWdodFtdBXdhaXRzDXdhaXRfd2VpZ2h0W10MYmxvY2tfaGVhZGVyAAgJdGltZXN0YW1wBnVpbnQzMghwcm9kdWNlcgRuYW1lCWNvbmZpcm1lZAZ1aW50MTYIcHJldmlvdXMLY2hlY2tzdW0yNTYRdHJhbnNhY3Rpb25fbXJvb3QLY2hlY2tzdW0yNTYMYWN0aW9uX21yb290C2NoZWNrc3VtMjU2EHNjaGVkdWxlX3ZlcnNpb24GdWludDMyDW5ld19wcm9kdWNlcnMScHJvZHVjZXJfc2NoZWR1bGU/FWJsb2NrY2hhaW5fcGFyYW1ldGVycwARE21heF9ibG9ja19uZXRfdXNhZ2UGdWludDY0GnRhcmdldF9ibG9ja19uZXRfdXNhZ2VfcGN0BnVpbnQzMhltYXhfdHJhbnNhY3Rpb25fbmV0X3VzYWdlBnVpbnQzMh5iYXNlX3Blcl90cmFuc2FjdGlvbl9uZXRfdXNhZ2UGdWludDMyEG5ldF91c2FnZV9sZWV3YXkGdWludDMyI2NvbnRleHRfZnJlZV9kaXNjb3VudF9uZXRfdXNhZ2VfbnVtBnVpbnQzMiNjb250ZXh0X2ZyZWVfZGlzY291bnRfbmV0X3VzYWdlX2RlbgZ1aW50MzITbWF4X2Jsb2NrX2NwdV91c2FnZQZ1aW50MzIadGFyZ2V0X2Jsb2NrX2NwdV91c2FnZV9wY3QGdWludDMyGW1heF90cmFuc2FjdGlvbl9jcHVfdXNhZ2UGdWludDMyGW1pbl90cmFuc2FjdGlvbl9jcHVfdXNhZ2UGdWludDMyGG1heF90cmFuc2FjdGlvbl9saWZldGltZQZ1aW50MzIeZGVmZXJyZWRfdHJ4X2V4cGlyYXRpb25fd2luZG93BnVpbnQzMhVtYXhfdHJhbnNhY3Rpb25fZGVsYXkGdWludDMyFm1heF9pbmxpbmVfYWN0aW9uX3NpemUGdWludDMyF21heF9pbmxpbmVfYWN0aW9uX2RlcHRoBnVpbnQxNhNtYXhfYXV0aG9yaXR5X2RlcHRoBnVpbnQxNgpidXJuYWN0aW9uAAELZmlvYWRkcmhhc2gHdWludDEyOAtjYW5jZWxkZWxheQACDmNhbmNlbGluZ19hdXRoEHBlcm1pc3Npb25fbGV2ZWwGdHJ4X2lkC2NoZWNrc3VtMjU2C2NyYXV0b3Byb3h5AAIFcHJveHkEbmFtZQVvd25lcgRuYW1lCmRlbGV0ZWF1dGgAAwdhY2NvdW50BG5hbWUKcGVybWlzc2lvbgRuYW1lB21heF9mZWUGdWludDY0EmVvc2lvX2dsb2JhbF9zdGF0ZRVibG9ja2NoYWluX3BhcmFtZXRlcnMLHWxhc3RfcHJvZHVjZXJfc2NoZWR1bGVfdXBkYXRlFGJsb2NrX3RpbWVzdGFtcF90eXBlGGxhc3RfcGVydm90ZV9idWNrZXRfZmlsbAp0aW1lX3BvaW50DnBlcnZvdGVfYnVja2V0BWludDY0D3BlcmJsb2NrX2J1Y2tldAVpbnQ2NBN0b3RhbF91bnBhaWRfYmxvY2tzBnVpbnQzMg90b3RhbF92b3RlZF9maW8FaW50NjQVdGhyZXNoX3ZvdGVkX2Zpb190aW1lCnRpbWVfcG9pbnQbbGFzdF9wcm9kdWNlcl9zY2hlZHVsZV9zaXplBnVpbnQxNhp0b3RhbF9wcm9kdWNlcl92b3RlX3dlaWdodAdmbG9hdDY0D2xhc3RfbmFtZV9jbG9zZRRibG9ja190aW1lc3RhbXBfdHlwZQ9sYXN0X2ZlZV91cGRhdGUUYmxvY2tfdGltZXN0YW1wX3R5cGUTZW9zaW9fZ2xvYmFsX3N0YXRlMgADDmxhc3RfYmxvY2tfbnVtFGJsb2NrX3RpbWVzdGFtcF90eXBlHHRvdGFsX3Byb2R1Y2VyX3ZvdGVwYXlfc2hhcmUHZmxvYXQ2NAhyZXZpc2lvbgV1aW50OBNlb3Npb19nbG9iYWxfc3RhdGUzAAIWbGFzdF92cGF5X3N0YXRlX3VwZGF0ZQp0aW1lX3BvaW50HHRvdGFsX3ZwYXlfc2hhcmVfY2hhbmdlX3JhdGUHZmxvYXQ2NAZpbmNyYW0AAglhY2NvdW50bW4EbmFtZQZhbW91bnQFaW50NjQMaW5oaWJpdHVubGNrAAIFb3duZXIEbmFtZQV2YWx1ZQZ1aW50MzIEaW5pdAACB3ZlcnNpb24JdmFydWludDMyBGNvcmUGc3ltYm9sCmtleV93ZWlnaHQAAgNrZXkKcHVibGljX2tleQZ3ZWlnaHQGdWludDE2CGxpbmthdXRoAAUHYWNjb3VudARuYW1lBGNvZGUEbmFtZQR0eXBlBG5hbWULcmVxdWlyZW1lbnQEbmFtZQdtYXhfZmVlBnVpbnQ2NBhsb2NrZWRfdG9rZW5faG9sZGVyX2luZm8ABwVvd25lcgRuYW1lEnRvdGFsX2dyYW50X2Ftb3VudAZ1aW50NjQVdW5sb2NrZWRfcGVyaW9kX2NvdW50BnVpbnQzMgpncmFudF90eXBlBnVpbnQzMhFpbmhpYml0X3VubG9ja2luZwZ1aW50MzIXcmVtYWluaW5nX2xvY2tlZF9hbW91bnQGdWludDY0CXRpbWVzdGFtcAZ1aW50MzIVbG9ja2VkX3Rva2Vuc19pbmZvX3YyAAgCaWQFaW50NjQNb3duZXJfYWNjb3VudARuYW1lC2xvY2tfYW1vdW50BnVpbnQ2NBFwYXlvdXRzX3BlcmZvcm1lZAZ1aW50MzIIY2FuX3ZvdGUFaW50MzIHcGVyaW9kcw5sb2NrcGVyaW9kdjJbXRVyZW1haW5pbmdfbG9ja19hbW91bnQGdWludDY0CXRpbWVzdGFtcAZ1aW50MzIMbG9ja3BlcmlvZHYyAAIIZHVyYXRpb24FaW50NjQGYW1vdW50BWludDY0DG1vZGdlbmxvY2tlZAAFBW93bmVyBG5hbWUHcGVyaW9kcw5sb2NrcGVyaW9kdjJbXQZhbW91bnQFaW50NjQPcmVtX2xvY2tfYW1vdW50BWludDY0B3BheW91dHMGdWludDMyCm5ld2FjY291bnQABAdjcmVhdG9yBG5hbWUEbmFtZQRuYW1lBW93bmVyCWF1dGhvcml0eQZhY3RpdmUJYXV0aG9yaXR5B29uYmxvY2sAAQZoZWFkZXIMYmxvY2tfaGVhZGVyB29uZXJyb3IAAglzZW5kZXJfaWQHdWludDEyOAhzZW50X3RyeAVieXRlcxBwZXJtaXNzaW9uX2xldmVsAAIFYWN0b3IEbmFtZQpwZXJtaXNzaW9uBG5hbWUXcGVybWlzc2lvbl9sZXZlbF93ZWlnaHQAAgpwZXJtaXNzaW9uEHBlcm1pc3Npb25fbGV2ZWwGd2VpZ2h0BnVpbnQxNg1wcm9kdWNlcl9pbmZvAAwCaWQGdWludDY0BW93bmVyBG5hbWULZmlvX2FkZHJlc3MGc3RyaW5nC2FkZHJlc3NoYXNoB3VpbnQxMjgLdG90YWxfdm90ZXMHZmxvYXQ2NBNwcm9kdWNlcl9wdWJsaWNfa2V5CnB1YmxpY19rZXkJaXNfYWN0aXZlBGJvb2wDdXJsBnN0cmluZw11bnBhaWRfYmxvY2tzBnVpbnQzMg9sYXN0X2NsYWltX3RpbWUKdGltZV9wb2ludAxsYXN0X2JwY2xhaW0GdWludDMyCGxvY2F0aW9uBnVpbnQxNgxwcm9kdWNlcl9rZXkAAg1wcm9kdWNlcl9uYW1lBG5hbWURYmxvY2tfc2lnbmluZ19rZXkKcHVibGljX2tleRFwcm9kdWNlcl9zY2hlZHVsZQACB3ZlcnNpb24GdWludDMyCXByb2R1Y2Vycw5wcm9kdWNlcl9rZXlbXQtyZWdwcm9kdWNlcgAGC2Zpb19hZGRyZXNzBnN0cmluZwtmaW9fcHViX2tleQZzdHJpbmcDdXJsBnN0cmluZwhsb2NhdGlvbgZ1aW50MTYFYWN0b3IEbmFtZQdtYXhfZmVlBWludDY0CHJlZ3Byb3h5AAMLZmlvX2FkZHJlc3MGc3RyaW5nBWFjdG9yBG5hbWUHbWF4X2ZlZQVpbnQ2NAlyZW1hY3Rpb24AAgZhY3Rpb24EbmFtZQVhY3RvcgRuYW1lCnJlc2V0Y2xhaW0AAQhwcm9kdWNlcgRuYW1lC3JtdnByb2R1Y2VyAAEIcHJvZHVjZXIEbmFtZQZzZXRhYmkAAgdhY2NvdW50BG5hbWUDYWJpBWJ5dGVzDHNldGF1dG9wcm94eQACBXByb3h5BG5hbWUFb3duZXIEbmFtZQdzZXRjb2RlAAQHYWNjb3VudARuYW1lBnZtdHlwZQV1aW50OAl2bXZlcnNpb24FdWludDgEY29kZQVieXRlcwtzZXRub2xpbWl0cwABB2FjY291bnQEbmFtZQlzZXRwYXJhbXMAAQZwYXJhbXMVYmxvY2tjaGFpbl9wYXJhbWV0ZXJzB3NldHByaXYAAgdhY2NvdW50BG5hbWUHaXNfcHJpdgV1aW50OA10b3BfcHJvZF9pbmZvAAEIcHJvZHVjZXIEbmFtZQp1bmxpbmthdXRoAAMHYWNjb3VudARuYW1lBGNvZGUEbmFtZQR0eXBlBG5hbWUMdW5sb2NrdG9rZW5zAAEFYWN0b3IEbmFtZQl1bnJlZ3Byb2QAAwtmaW9fYWRkcmVzcwZzdHJpbmcFYWN0b3IEbmFtZQdtYXhfZmVlBWludDY0CnVucmVncHJveHkAAwtmaW9fYWRkcmVzcwZzdHJpbmcFYWN0b3IEbmFtZQdtYXhfZmVlBWludDY0CnVwZGF0ZWF1dGgABQdhY2NvdW50BG5hbWUKcGVybWlzc2lvbgRuYW1lBnBhcmVudARuYW1lBGF1dGgJYXV0aG9yaXR5B21heF9mZWUGdWludDY0C3VwZGF0ZXBvd2VyAAIFdm90ZXIEbmFtZQp1cGRhdGVvbmx5BGJvb2wLdXBkbGJwY2xhaW0AAQhwcm9kdWNlcgRuYW1lCXVwZGxvY2tlZAACBW93bmVyBG5hbWUPYW1vdW50cmVtYWluaW5nBnVpbnQ2NAx1cGR0cmV2aXNpb24AAQhyZXZpc2lvbgV1aW50OA51c2VyX3Jlc291cmNlcwAEBW93bmVyBG5hbWUKbmV0X3dlaWdodAVhc3NldApjcHVfd2VpZ2h0BWFzc2V0CXJhbV9ieXRlcwVpbnQ2NAx2b3RlcHJvZHVjZXIABAlwcm9kdWNlcnMIc3RyaW5nW10LZmlvX2FkZHJlc3MGc3RyaW5nBWFjdG9yBG5hbWUHbWF4X2ZlZQVpbnQ2NAl2b3RlcHJveHkABAVwcm94eQZzdHJpbmcLZmlvX2FkZHJlc3MGc3RyaW5nBWFjdG9yBG5hbWUHbWF4X2ZlZQVpbnQ2NAp2b3Rlcl9pbmZvAAwCaWQGdWludDY0CmZpb2FkZHJlc3MGc3RyaW5nC2FkZHJlc3NoYXNoB3VpbnQxMjgFb3duZXIEbmFtZQVwcm94eQRuYW1lCXByb2R1Y2VycwZuYW1lW10QbGFzdF92b3RlX3dlaWdodAdmbG9hdDY0E3Byb3hpZWRfdm90ZV93ZWlnaHQHZmxvYXQ2NAhpc19wcm94eQRib29sDWlzX2F1dG9fcHJveHkEYm9vbAlyZXNlcnZlZDIGdWludDMyCXJlc2VydmVkMwVhc3NldAt3YWl0X3dlaWdodAACCHdhaXRfc2VjBnVpbnQzMgZ3ZWlnaHQGdWludDE2JQAAmNRlZFIyCWFkZGFjdGlvbgCQFEQ0TsVSMgxhZGRnZW5sb2NrZWQAAABICiIaUzIJYWRkbG9ja2VkAADApC4jM68+CmJ1cm5hY3Rpb24AALyJKkWFpkELY2FuY2VsZGVsYXkAAHynt9KszUULY3JhdXRvcHJveHkAAEDL2qisokoKZGVsZXRlYXV0aAAAAAAASHPRdAZpbmNyYW0AAFGcOrvj2nQMaW5oaWJpdHVubGNrAAAAAAAAkN10BGluaXQAAAAALWsDp4sIbGlua2F1dGgAkBRENE7FEpUMbW9kZ2VubG9ja2VkAABAnpoiZLiaCm5ld2FjY291bnQAAAAAACIaz6QHb25ibG9jawAAAADg0nvVpAdvbmVycm9yAACuQjrRW5m6C3JlZ3Byb2R1Y2VyAAAAAL7TW5m6CHJlZ3Byb3h5AAAAmNRlZKS6CXJlbWFjdGlvbgAAgHQmoqywugpyZXNldGNsYWltAACuQjrRW7e8C3JtdnByb2R1Y2VyAAAAAAC4Y7LCBnNldGFiaQDgO72VZm2ywgxzZXRhdXRvcHJveHkAAAAAQCWKssIHc2V0Y29kZQAAcHbSRTqzwgtzZXRub2xpbWl0cwAAAMDSXFOzwglzZXRwYXJhbXMAAAAAYLtbs8IHc2V0cHJpdgAAQMvawOni1Ap1bmxpbmthdXRoAICngjRDROPUDHVubG9ja3Rva2VucwAAAEj0Vqbu1Al1bnJlZ3Byb2QAAIDv9Fam7tQKdW5yZWdwcm94eQAAQMvaqGxS1Qp1cGRhdGVhdXRoAACu4rSqbFLVC3VwZGF0ZXBvd2VyAACkMxHVE1PVC3VwZGxicGNsYWltAAAASAoiGlPVCXVwZGxvY2tlZAAwqcNuq5tT1Qx1cGR0cmV2aXNpb24AcBXSid6qMt0Mdm90ZXByb2R1Y2VyAAAA8J3eqjLdCXZvdGVwcm94eQAKAAAAoGHT3DEDaTY0AAAIYWJpX2hhc2gAAAAARHNoZANpNjQAABJlb3Npb19nbG9iYWxfc3RhdGUAAABARHNoZANpNjQAABNlb3Npb19nbG9iYWxfc3RhdGUyAAAAYERzaGQDaTY0AAATZW9zaW9fZ2xvYmFsX3N0YXRlM4CngjQnBRGNA2k2NAAAGGxvY2tlZF90b2tlbl9ob2xkZXJfaW5mbyA2ngrSDBGNA2k2NAAAFWxvY2tlZF90b2tlbnNfaW5mb192MgAAwFchneitA2k2NAAADXByb2R1Y2VyX2luZm8AAAA40VsrzQNpNjQAAA10b3BfcHJvZF9pbmZvAAAAAKt7FdYDaTY0AAAOdXNlcl9yZXNvdXJjZXMAAAAA4Ksy3QNpNjQAAAp2b3Rlcl9pbmZvAAAAAA==='
	})

	abiMap.set('fio.address', {
		account_name: 'fio.address',
		abi: 'DmVvc2lvOjphYmkvMS4wABsHZmlvbmFtZQAJAmlkBnVpbnQ2NARuYW1lBnN0cmluZwhuYW1laGFzaAd1aW50MTI4BmRvbWFpbgZzdHJpbmcKZG9tYWluaGFzaAd1aW50MTI4CmV4cGlyYXRpb24GdWludDY0DW93bmVyX2FjY291bnQEbmFtZQlhZGRyZXNzZXMOdG9rZW5wdWJhZGRyW10XYnVuZGxlZWxpZ2libGVjb3VudGRvd24GdWludDY0BmRvbWFpbgAGAmlkBnVpbnQ2NARuYW1lBnN0cmluZwpkb21haW5oYXNoB3VpbnQxMjgHYWNjb3VudARuYW1lCWlzX3B1YmxpYwV1aW50OApleHBpcmF0aW9uBnVpbnQ2NAplb3Npb19uYW1lAAMHYWNjb3VudARuYW1lCWNsaWVudGtleQZzdHJpbmcHa2V5aGFzaAd1aW50MTI4C25mdGJ1cm5pbmZvAAICaWQGdWludDY0EGZpb19hZGRyZXNzX2hhc2gHdWludDEyOApyZWdhZGRyZXNzAAULZmlvX2FkZHJlc3MGc3RyaW5nFG93bmVyX2Zpb19wdWJsaWNfa2V5BnN0cmluZwdtYXhfZmVlBWludDY0BWFjdG9yBG5hbWUEdHBpZAZzdHJpbmcMdG9rZW5wdWJhZGRyAAMKdG9rZW5fY29kZQZzdHJpbmcKY2hhaW5fY29kZQZzdHJpbmcOcHVibGljX2FkZHJlc3MGc3RyaW5nCG5mdHBhcmFtAAYKY2hhaW5fY29kZQZzdHJpbmcQY29udHJhY3RfYWRkcmVzcwZzdHJpbmcIdG9rZW5faWQGc3RyaW5nA3VybAZzdHJpbmcEaGFzaAZzdHJpbmcIbWV0YWRhdGEGc3RyaW5nC3JlbW5mdHBhcmFtAAMKY2hhaW5fY29kZQZzdHJpbmcQY29udHJhY3RfYWRkcmVzcwZzdHJpbmcIdG9rZW5faWQGc3RyaW5nB25mdGluZm8ADQJpZAZ1aW50NjQLZmlvX2FkZHJlc3MGc3RyaW5nCmNoYWluX2NvZGUGc3RyaW5nD2NoYWluX2NvZGVfaGFzaAZ1aW50NjQIdG9rZW5faWQGc3RyaW5nDXRva2VuX2lkX2hhc2gHdWludDEyOAN1cmwGc3RyaW5nEGZpb19hZGRyZXNzX2hhc2gHdWludDEyOBBjb250cmFjdF9hZGRyZXNzBnN0cmluZxVjb250cmFjdF9hZGRyZXNzX2hhc2gHdWludDEyOARoYXNoBnN0cmluZwpoYXNoX2luZGV4B3VpbnQxMjgIbWV0YWRhdGEGc3RyaW5nCmFkZGFkZHJlc3MABQtmaW9fYWRkcmVzcwZzdHJpbmcQcHVibGljX2FkZHJlc3Nlcw50b2tlbnB1YmFkZHJbXQdtYXhfZmVlBWludDY0BWFjdG9yBG5hbWUEdHBpZAZzdHJpbmcKcmVtYWRkcmVzcwAFC2Zpb19hZGRyZXNzBnN0cmluZxBwdWJsaWNfYWRkcmVzc2VzDnRva2VucHViYWRkcltdB21heF9mZWUFaW50NjQFYWN0b3IEbmFtZQR0cGlkBnN0cmluZwpyZW1hbGxhZGRyAAQLZmlvX2FkZHJlc3MGc3RyaW5nB21heF9mZWUFaW50NjQFYWN0b3IEbmFtZQR0cGlkBnN0cmluZwlyZWdkb21haW4ABQpmaW9fZG9tYWluBnN0cmluZxRvd25lcl9maW9fcHVibGljX2tleQZzdHJpbmcHbWF4X2ZlZQVpbnQ2NAVhY3RvcgRuYW1lBHRwaWQGc3RyaW5nC3JlbmV3ZG9tYWluAAQKZmlvX2RvbWFpbgZzdHJpbmcHbWF4X2ZlZQVpbnQ2NAR0cGlkBnN0cmluZwVhY3RvcgRuYW1lDHJlbmV3YWRkcmVzcwAEC2Zpb19hZGRyZXNzBnN0cmluZwdtYXhfZmVlBWludDY0BHRwaWQGc3RyaW5nBWFjdG9yBG5hbWUMc2V0ZG9tYWlucHViAAUKZmlvX2RvbWFpbgZzdHJpbmcJaXNfcHVibGljBGludDgHbWF4X2ZlZQVpbnQ2NAVhY3RvcgRuYW1lBHRwaWQGc3RyaW5nC2J1cm5leHBpcmVkAAIGb2Zmc2V0BWludDY0BWxpbWl0BWludDMyC2RlY3Jjb3VudGVyAAILZmlvX2FkZHJlc3MGc3RyaW5nBHN0ZXAFaW50MzIKYmluZDJlb3NpbwADB2FjY291bnQEbmFtZQpjbGllbnRfa2V5BnN0cmluZwhleGlzdGluZwRib29sC2J1cm5hZGRyZXNzAAQLZmlvX2FkZHJlc3MGc3RyaW5nB21heF9mZWUFaW50NjQEdHBpZAZzdHJpbmcFYWN0b3IEbmFtZQp4ZmVyZG9tYWluAAUKZmlvX2RvbWFpbgZzdHJpbmcYbmV3X293bmVyX2Zpb19wdWJsaWNfa2V5BnN0cmluZwdtYXhfZmVlBWludDY0BWFjdG9yBG5hbWUEdHBpZAZzdHJpbmcLeGZlcmFkZHJlc3MABQtmaW9fYWRkcmVzcwZzdHJpbmcYbmV3X293bmVyX2Zpb19wdWJsaWNfa2V5BnN0cmluZwdtYXhfZmVlBWludDY0BWFjdG9yBG5hbWUEdHBpZAZzdHJpbmcKYWRkYnVuZGxlcwAFC2Zpb19hZGRyZXNzBnN0cmluZwtidW5kbGVfc2V0cwVpbnQ2NAdtYXhfZmVlBWludDY0BHRwaWQGc3RyaW5nBWFjdG9yBG5hbWUGYWRkbmZ0AAULZmlvX2FkZHJlc3MGc3RyaW5nBG5mdHMKbmZ0cGFyYW1bXQdtYXhfZmVlBWludDY0BWFjdG9yBG5hbWUEdHBpZAZzdHJpbmcGcmVtbmZ0AAULZmlvX2FkZHJlc3MGc3RyaW5nBG5mdHMNcmVtbmZ0cGFyYW1bXQdtYXhfZmVlBWludDY0BWFjdG9yBG5hbWUEdHBpZAZzdHJpbmcKcmVtYWxsbmZ0cwAEC2Zpb19hZGRyZXNzBnN0cmluZwdtYXhfZmVlBWludDY0BWFjdG9yBG5hbWUEdHBpZAZzdHJpbmcIYnVybm5mdHMAAQVhY3RvcgRuYW1lEwCuylNTdJFKC2RlY3Jjb3VudGVyAAAAxuqmZJi6CnJlZ2FkZHJlc3MAAADG6qZkUjIKYWRkYWRkcmVzcwAAAMbqpmSkugpyZW1hZGRyZXNzAADATcnEaKS6CnJlbWFsbGFkZHIAAACYzkiamLoJcmVnZG9tYWluAACmM5Imrqa6C3JlbmV3ZG9tYWluAICxuikZrqa6DHJlbmV3YWRkcmVzcwAAkrqudjWvPgtidXJuZXhwaXJlZABwdJ3OSJqywgxzZXRkb21haW5wdWIAAAB1mCqRpjsKYmluZDJlb3NpbwAAMFY3JTOvPgtidXJuYWRkcmVzcwAAwHRG0nTV6gp4ZmVyZG9tYWluAAAwVjclc9XqC3hmZXJhZGRyZXNzAAAAVjFNfVIyCmFkZGJ1bmRsZXMAAAAAAOQ1UzIGYWRkbmZ0AAAAAADkNaW6BnJlbW5mdAAAAM5rxmikugpyZW1hbGxuZnRzAAAAADivOa8+CGJ1cm5uZnRzAAUAAABYSTOpWwNpNjQBAmlkAQZzdHJpbmcHZmlvbmFtZQAAAABPZyRNA2k2NAECaWQBBnN0cmluZwZkb21haW4AQDUyT00RMgNpNjQBB2FjY291bnQBBnVpbnQ2NAplb3Npb19uYW1lAAAAAACA85oDaTY0AAAHbmZ0aW5mbwAAAHZeffKaA2k2NAECaWQBBnVpbnQ2NAtuZnRidXJuaW5mbwAAAAA=='
	})

	abiMap.set('fio.reqobt', {
		account_name: 'fio.reqobt',
		abi: 'DmVvc2lvOjphYmkvMS4wAAoKZmlvcmVxY3R4dAANDmZpb19yZXF1ZXN0X2lkBnVpbnQ2NBFwYXllcl9maW9fYWRkcmVzcwd1aW50MTI4EXBheWVlX2Zpb19hZGRyZXNzB3VpbnQxMjgZcGF5ZXJfZmlvX2FkZHJlc3NfaGV4X3N0cgZzdHJpbmcZcGF5ZWVfZmlvX2FkZHJlc3NfaGV4X3N0cgZzdHJpbmcbcGF5ZXJfZmlvX2FkZHJlc3Nfd2l0aF90aW1lB3VpbnQxMjgbcGF5ZWVfZmlvX2FkZHJlc3Nfd2l0aF90aW1lB3VpbnQxMjgHY29udGVudAZzdHJpbmcKdGltZV9zdGFtcAZ1aW50NjQOcGF5ZXJfZmlvX2FkZHIGc3RyaW5nDnBheWVlX2Zpb19hZGRyBnN0cmluZwlwYXllcl9rZXkGc3RyaW5nCXBheWVlX2tleQZzdHJpbmcOcmVjb3Jkb2J0X2luZm8ADQJpZAZ1aW50NjQRcGF5ZXJfZmlvX2FkZHJlc3MHdWludDEyOBFwYXllZV9maW9fYWRkcmVzcwd1aW50MTI4GXBheWVyX2Zpb19hZGRyZXNzX2hleF9zdHIGc3RyaW5nGXBheWVlX2Zpb19hZGRyZXNzX2hleF9zdHIGc3RyaW5nG3BheWVyX2Zpb19hZGRyZXNzX3dpdGhfdGltZQd1aW50MTI4G3BheWVlX2Zpb19hZGRyZXNzX3dpdGhfdGltZQd1aW50MTI4B2NvbnRlbnQGc3RyaW5nCnRpbWVfc3RhbXAGdWludDY0DnBheWVyX2Zpb19hZGRyBnN0cmluZw5wYXllZV9maW9fYWRkcgZzdHJpbmcJcGF5ZXJfa2V5BnN0cmluZwlwYXllZV9rZXkGc3RyaW5nCWZpb3JlcXN0cwAFAmlkBnVpbnQ2NA5maW9fcmVxdWVzdF9pZAZ1aW50NjQGc3RhdHVzBnVpbnQ2NAhtZXRhZGF0YQZzdHJpbmcKdGltZV9zdGFtcAZ1aW50NjQMZmlvdHJ4dF9pbmZvAA8CaWQGdWludDY0DmZpb19yZXF1ZXN0X2lkBnVpbnQ2NBJwYXllcl9maW9fYWRkcl9oZXgHdWludDEyOBJwYXllZV9maW9fYWRkcl9oZXgHdWludDEyOA1maW9fZGF0YV90eXBlBXVpbnQ4CHJlcV90aW1lBnVpbnQ2NA5wYXllcl9maW9fYWRkcgZzdHJpbmcOcGF5ZWVfZmlvX2FkZHIGc3RyaW5nCXBheWVyX2tleQZzdHJpbmcJcGF5ZWVfa2V5BnN0cmluZw1wYXllcl9hY2NvdW50BG5hbWUNcGF5ZWVfYWNjb3VudARuYW1lC3JlcV9jb250ZW50BnN0cmluZwtvYnRfY29udGVudAZzdHJpbmcIb2J0X3RpbWUGdWludDY0Cm1pZ3JsZWRnZXIABwJpZAZ1aW50NjQIYmVnaW5vYnQFaW50NjQKY3VycmVudG9idAVpbnQ2NAdiZWdpbnJxBWludDY0CWN1cnJlbnRycQVpbnQ2NApjdXJyZW50c3RhBWludDY0CmlzRmluaXNoZWQEaW50OAdtaWdydHJ4AAIGYW1vdW50BWludDE2BWFjdG9yBnN0cmluZwlyZWNvcmRvYnQABw5maW9fcmVxdWVzdF9pZAZzdHJpbmcRcGF5ZXJfZmlvX2FkZHJlc3MGc3RyaW5nEXBheWVlX2Zpb19hZGRyZXNzBnN0cmluZwdjb250ZW50BnN0cmluZwdtYXhfZmVlBWludDY0BWFjdG9yBnN0cmluZwR0cGlkBnN0cmluZwtuZXdmdW5kc3JlcQAGEXBheWVyX2Zpb19hZGRyZXNzBnN0cmluZxFwYXllZV9maW9fYWRkcmVzcwZzdHJpbmcHY29udGVudAZzdHJpbmcHbWF4X2ZlZQVpbnQ2NAVhY3RvcgZzdHJpbmcEdHBpZAZzdHJpbmcMcmVqZWN0Zm5kcmVxAAQOZmlvX3JlcXVlc3RfaWQGc3RyaW5nB21heF9mZWUFaW50NjQFYWN0b3IGc3RyaW5nBHRwaWQGc3RyaW5nDGNhbmNlbGZuZHJlcQAEDmZpb19yZXF1ZXN0X2lkBnN0cmluZwdtYXhfZmVlBWludDY0BWFjdG9yBnN0cmluZwR0cGlkBnN0cmluZwUAAACg33yZkwdtaWdydHJ4AAAAyIemS5G6CXJlY29yZG9idAAArLo4Tb24mgtuZXdmdW5kc3JlcQBg1U1zZaSeugxyZWplY3RmbmRyZXEAYNVNc0WFpkEMY2FuY2VsZm5kcmVxAAUAcO4ZWXWpWwNpNjQBDmZpb19yZXF1ZXN0X2lkAQZ1aW50NjQKZmlvcmVxY3R4dAAAzoemS5G6A2k2NAECaWQBBnVpbnQ2NA5yZWNvcmRvYnRfaW5mbwAAxhlbdalbA2k2NAECaWQBBnVpbnQ2NAlmaW9yZXFzdHMAAMA495upWwNpNjQBAmlkAQZ1aW50NjQMZmlvdHJ4dF9pbmZvAPBVLKl4mZMDaTY0AQJpZAEGdWludDY0Cm1pZ3JsZWRnZXIAAAAA='
	})

	return abiMap;
}

async function generatePushTransaction (actionName, transaction) {

	fs.appendFileSync(signedTransactionFileName, "action: " + actionName + "\r\n" + "\r\n");

	const pushTransaction = "curl " + baseUrl  + "push_transaction -X POST -d '" + JSON.stringify(transaction) + "'"
	console.log(pushTransaction)
	fs.appendFileSync(signedTransactionFileName, pushTransaction + "\r\n" + "\r\n");
}

async function generateSignedTransaction (accountName, actionName, data){

	transaction = {
	    expiration: getExpirationDate(),
	    ref_block_num: ref_block_num & 0xffff,
	    ref_block_prefix: ref_block_prefix,
	    actions: [{
	        account: accountName,
	        name: actionName,
	        authorization: [{
	            actor: FIOJS.Fio.accountHash(publicKey),
	            permission: 'active',
	        }],
	        data: data,
	    }]
	};

	console.log(transaction)
	console.log(chain_id)
	const signedTransaction = await FIOJS.Fio.prepareTransaction({
		transaction, chainId: chain_id, privateKeys: [privateKey], abiMap: getAbiMap(),
		textDecoder: new TextEncoding.TextDecoder(), textEncoder: new TextEncoding.TextEncoder(),
	});

	//generatePushTransaction(actionName, signedTransaction); // write to file

	//return signedTransaction;
}

function getExpirationDate () {
	const expiration = new Date(head_block_time)
    expiration.setSeconds(expiration.getSeconds() + 1200)
    const expirationStr = expiration.toISOString()
    return expirationStr.substr(0, expirationStr.length - 1)
} 

// this is an example of how to transfer funds
async function generateTransferFunds () {
	const data = {
		payee_public_key: payeePubKey,
		amount: transferAmount,
		max_fee: maxFee,
		actor: actor,
		tpid: ''
  }

	const transaction = await generateSignedTransaction ('fio.token', 'trnsfiopubky' , data)
}

async function generateVoteProducerTransaction () {
	const data = {
		producers: producerList,
    fio_address: voterFioAddress,
		max_fee: maxFee,
		actor: actor,
  }

	const transaction = await generateSignedTransaction ('eosio', 'voteproducer' , data)
}

// put all the calls you wish to generate... here
function generatePushTransactions () {
	date = new Date().toISOString()
	
	fs.appendFileSync(signedTransactionFileName, date + "\r\n" + "\r\n");

	if (action == 'voteproducer') {
		generateVoteProducerTransaction();
	} else if (action == 'trnsfiopubky') {
		generateTransferFunds();
	}
}

// start of script
function main () {
	fs.readFile(networkFile, function(err, data) { 
	      
		// Check for errors 
		if (err) throw err; 
		
		// Converting to JSON 
		const networkVariables = JSON.parse(data); 

		// network.json variables (as created from 'node network.js' call)
		head_block_time = networkVariables.head_block_time
		chain_id = networkVariables.chain_id
		ref_block_num = networkVariables.ref_block_num
		ref_block_prefix = networkVariables.ref_block_prefix

		// create the push transactions
		generatePushTransactions() 
	}); 
}

main();